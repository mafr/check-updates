#! /usr/bin/env python3
#
# Nagios/Icinga plugin to check whether there are security updates
# available on a Debian/Ubuntu system.
#
# Copyright (c) 2016, Matthias Friedrich <matt@mafr.de>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#
#
# Return values as per Nagios/Icinga conventions:
#   0 - OK: no security updates found
#   1 - WARNING: uninstalled security updates available
#   2 - CRITICAL: package index is out of date
#   3 - UNKNOWN: i.e. package missing, incompatible operating system, etc.
#
from __future__ import print_function

import os
import sys
import subprocess
from datetime import datetime, timedelta


# This file is touched each time "apt-get update" is executed 
# successfully by apt. Note that this only works if the config
# option APT::Update::Post-Invoke-Success has its default setting.
TIMESTAMP_FILE = "/var/lib/apt/periodic/update-success-stamp"

# Raise an error if the package index is older than this.
INDEX_MAX_AGE_HOURS = 24

# Package update-notifier-common needs to be installed for this.
APT_CHECK = "/usr/lib/update-notifier/apt-check"


try:
    mtime = os.path.getmtime(TIMESTAMP_FILE)
except Exception as e:
    print("UNKNOWN -", str(e))
    sys.exit(3)

index_age = datetime.utcfromtimestamp(mtime)
max_age = datetime.utcnow() - timedelta(hours=INDEX_MAX_AGE_HOURS)

if index_age < max_age:
    print("CRITICAL - package index is older than {} hours".format(INDEX_MAX_AGE_HOURS))
    sys.exit(2)


# Call apt-check which results in a "X;Y" to stderr, where X is the overall number of
# upgrades available and Y is the number out of these that are security upgrades.
try:
    res = subprocess.check_output([APT_CHECK], stderr=subprocess.STDOUT)
except Exception as e:
    print("UNKNOWN -", str(e))
    sys.exit(3)

num_updates, num_sec_updates = [int(x) for x in res.decode("UTF-8").split(";")]

if num_sec_updates == 0:
    print("OK - no security updates available ({} regular updates).".format(num_updates))
    sys.exit(0)
else:
    print("WARNING - {} security updates ready for installation.".format(num_sec_updates))
    sys.exit(1)

# EOF
